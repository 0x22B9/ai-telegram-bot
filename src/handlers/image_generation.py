import logging
import io
import asyncio
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from fluent.runtime import FluentLocalization
from aiogram.enums import ChatAction

from src.services import image_generation as img_gen_service # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å
from src.keyboards import get_main_keyboard # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

logger = logging.getLogger(__name__)
image_generation_router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ImageGenState(StatesGroup):
    waiting_for_prompt = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate_image
@image_generation_router.message(Command("generate_image"))
async def handle_generate_image_command(message: types.Message, state: FSMContext, localizer: FluentLocalization):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –ø—Ä–æ–º–ø—Ç."""
    prompt_request_text = localizer.format_value("generate-image-prompt")
    await message.answer(prompt_request_text)
    await state.set_state(ImageGenState.waiting_for_prompt) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞, –∫–æ–≥–¥–∞ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç
@image_generation_router.message(ImageGenState.waiting_for_prompt, F.text)
async def handle_image_prompt(message: types.Message, state: FSMContext, bot: Bot, localizer: FluentLocalization):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–º–ø—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    prompt = message.text
    user_id = message.from_user.id
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç user_id={user_id}: {prompt[:50]}...")

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    generating_text = localizer.format_value("generating-image")
    status_message = await message.answer(generating_text)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    typing_task = asyncio.create_task(send_upload_photo_periodically(bot, chat_id))

    image_bytes = None
    error_code = img_gen_service.IMAGE_GEN_UNKNOWN_ERROR # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        image_bytes, error_code = await img_gen_service.generate_image_from_prompt(prompt)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if typing_task and not typing_task.done():
            typing_task.cancel()
            try: await asyncio.wait_for(typing_task, timeout=0.1)
            except (asyncio.CancelledError, asyncio.TimeoutError): pass

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if image_bytes and error_code == img_gen_service.IMAGE_GEN_SUCCESS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            photo_input = types.BufferedInputFile(image_bytes, filename="generated_image.png")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —É–¥–∞–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            main_kbd = get_main_keyboard(localizer) # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer_photo(photo=photo_input, caption=f"üñºÔ∏è {prompt[:900]}", reply_markup=main_kbd) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É caption
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é..."
            await status_message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è user_id={user_id}: {e}", exc_info=True)
            error_text = localizer.format_value("error-telegram-send")
            await status_message.edit_text(error_text) # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    else:
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        error_key = f"error-image-{error_code.split(':')[-1].lower()}" # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
        error_text = localizer.format_value(error_key, fallback=localizer.format_value("error-image-unknown")) # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –æ–±—â—É—é –æ—à–∏–±–∫—É
        await status_message.edit_text(error_text)
        logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è user_id={user_id}: {error_code}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
@image_generation_router.message(ImageGenState.waiting_for_prompt)
async def handle_invalid_image_prompt_input(message: types.Message, localizer: FluentLocalization):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞."""
    error_text = localizer.format_value("error-invalid-prompt-type")
    await message.reply(error_text) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
async def send_upload_photo_periodically(bot: Bot, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'upload_photo' –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥."""
    try:
        while True:
            await bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_PHOTO)
            await asyncio.sleep(5)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logger.error(f"Error in send_upload_photo_periodically for chat {chat_id}: {e}", exc_info=True)