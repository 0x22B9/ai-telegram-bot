import logging
import io
from aiogram import Router, types, F, Bot # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Bot –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
from aiogram.fsm.context import FSMContext

from src.services import gemini

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_router = Router()

@image_router.message(F.photo) # –õ–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
async def handle_image_message(message: types.Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Gemini Vision.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç user_id={user_id}.")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    photo = message.photo[-1]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
    thinking_message = await message.answer("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
    image_bytes_io = io.BytesIO()
    try:
        await bot.download(file=photo, destination=image_bytes_io)
        image_bytes = image_bytes_io.getvalue()
        logger.debug(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç user_id={user_id} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ ({len(image_bytes)} –±–∞–π—Ç).")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç user_id={user_id}: {e}", exc_info=True)
        await thinking_message.edit_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    finally:
        image_bytes_io.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º BytesIO

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ. –ò–Ω–∞—á–µ - –ø—Ä–æ—Å–∏–º –æ–ø–∏—Å–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    prompt = message.caption if message.caption else "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    logger.info(f"–ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini Vision (user_id={user_id}): {prompt}")

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    response_text = await gemini.analyze_image(image_bytes, prompt)

    if response_text:
        await thinking_message.edit_text(response_text)
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Gemini –¥–ª—è user_id={user_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
    else:
        await thinking_message.edit_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Gemini –¥–ª—è user_id={user_id}.")